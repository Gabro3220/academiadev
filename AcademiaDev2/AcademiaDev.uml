@startuml AcademiaDev

!define RECTANGLE class

package "academiadev" {
    
    class AcademiaDevSystem {
        - courses: Map<String, Course>
        - users: Map<String, User>
        - enrollments: List<Enrollment>
        - supportTickets: Queue<SupportTicket>
        - currentUser: User
        --
        + AcademiaDevSystem()
        + login(email: String): boolean
        + getCurrentUser(): User
        + activateCourse(courseTitle: String): void
        + deactivateCourse(courseTitle: String): void
        + getActiveCourses(): List<Course>
        + changeStudentPlan(studentEmail: String, newPlan: SubscriptionPlan): void
        + enrollInCourse(courseTitle: String): void
        + updateProgress(courseTitle: String, progress: int): void
        + createSupportTicket(title: String, message: String): void
        + processNextTicket(): SupportTicket
        + getCoursesByDifficulty(difficulty: DifficultyLevel): List<Course>
        + getUniqueInstructors(): Set<String>
        + getAverageProgress(): double
        + getStudentWithMostEnrollments(): Optional<Student>
    }

    package "model" {
        
        abstract class User {
            # name: String
            # email: String
            --
            + User(name: String, email: String)
            + getName(): String
            + setName(name: String): void
            + getEmail(): String
            + setEmail(email: String): void
            + toString(): String
        }

        class Admin extends User {
            --
            + Admin(name: String, email: String)
            + toString(): String
        }

        class Student extends User {
            - subscriptionPlan: SubscriptionPlan
            --
            + Student(name: String, email: String, subscriptionPlan: SubscriptionPlan)
            + getSubscriptionPlan(): SubscriptionPlan
            + setSubscriptionPlan(subscriptionPlan: SubscriptionPlan): void
            + toString(): String
        }

        interface SubscriptionPlan {
            + canEnroll(currentEnrollments: int): boolean
            + getPlanName(): String
        }

        class BasicPlan implements SubscriptionPlan {
            --
            + canEnroll(currentEnrollments: int): boolean
            + getPlanName(): String
        }

        class PremiumPlan implements SubscriptionPlan {
            --
            + canEnroll(currentEnrollments: int): boolean
            + getPlanName(): String
        }

        class Course {
            - title: String
            - description: String
            - instructorName: String
            - durationInHours: int
            - difficultyLevel: DifficultyLevel
            - status: CourseStatus
            --
            + Course(title: String, description: String, instructorName: String, durationInHours: int, difficultyLevel: DifficultyLevel)
            + getTitle(): String
            + getDescription(): String
            + getInstructorName(): String
            + getDurationInHours(): int
            + getDifficultyLevel(): DifficultyLevel
            + getStatus(): CourseStatus
            + setStatus(status: CourseStatus): void
        }

        class Enrollment {
            - student: Student
            - course: Course
            - progress: int
            --
            + Enrollment(student: Student, course: Course)
            + getStudent(): Student
            + getCourse(): Course
            + getProgress(): int
            + setProgress(progress: int): void
        }

        class SupportTicket {
            - title: String
            - message: String
            - user: User
            - ticketId: int
            - {static} nextId: int
            --
            + SupportTicket(title: String, message: String, user: User)
            + getTitle(): String
            + getMessage(): String
            + getUser(): User
            + getTicketId(): int
        }

        enum DifficultyLevel {
            BEGINNER
            INTERMEDIATE
            ADVANCED
        }

        enum CourseStatus {
            ACTIVE
            INACTIVE
        }
    }

    package "exception" {
        class EnrollmentException extends Exception {
            --
            + EnrollmentException(message: String)
        }
    }

    package "util" {
        class InitialData {
            + {static} createInitialCourses(): Map<String, Course>
            + {static} createInitialUsers(): Map<String, User>
            + {static} createInitialEnrollments(users: Map<String, User>, courses: Map<String, Course>): List<Enrollment>
            + {static} createInitialTickets(users: Map<String, User>): Queue<SupportTicket>
        }

        class GenericCsvExporter {
            + {static} exportToCsv(data: List<?>, filename: String): void
        }
    }
}

' Relacionamentos
AcademiaDevSystem --> User : uses
AcademiaDevSystem --> Course : manages
AcademiaDevSystem --> Enrollment : manages
AcademiaDevSystem --> SupportTicket : manages
AcademiaDevSystem --> InitialData : uses

Student --> SubscriptionPlan : has
Enrollment --> Student : references
Enrollment --> Course : references
SupportTicket --> User : references

' Herança
Admin --|> User
Student --|> User

' Implementação
BasicPlan ..|> SubscriptionPlan
PremiumPlan ..|> SubscriptionPlan

' Associações
AcademiaDevSystem ||--o{ Course : contains
AcademiaDevSystem ||--o{ User : contains
AcademiaDevSystem ||--o{ Enrollment : contains
AcademiaDevSystem ||--o{ SupportTicket : contains

Student ||--o{ Enrollment : has
Course ||--o{ Enrollment : has
User ||--o{ SupportTicket : creates

@enduml
